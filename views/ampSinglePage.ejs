<!doctype html>
<html lang="en">
<% include ampViewerHead.ejs %>
<% let currentSlide = ampStory.cuts.find(cut => {
    return cut.position === +current
})
%>
<body>
<script>
    document.addEventListener('dragover', function (event) {
        event.preventDefault();
        return false;
    }, false);

    document.addEventListener('drop', function (event) {
        event.preventDefault();
        return false;
    }, false);
    window.addEventListener('message', function (event) {
        const currentLayer = document.getElementById(`layer${event.data.currentId}`);

        if (currentLayer) {
            currentLayer.parentNode.classList.add('layer-border');
            currentLayer.querySelector('.rotate').style.display = 'flex';
            currentLayer.classList.add('resizable');
            makeResizableDiv(currentLayer);
        }
        if (event.data.previousId !== null && event.data.previousId !== undefined) {
            const previousLayer = document.getElementById(`layer${event.data.previousId}`);
            previousLayer.classList.remove('resizable');
            previousLayer.parentNode.classList.remove('layer-border');
            previousLayer.querySelector('.rotate').style.display = 'none';
        }
    });
    window.onload = () => {
        var css = '.i-amphtml-story-bookend-active amp-story-page[active] {transition: none!important; filter: none!important;} .i-amphtml-story-bookend-active amp-story-page[active]:after {content: none!important}',
            head = document.head || document.getElementsByTagName('head')[0],
            style = document.createElement('style');
        style.type = 'text/css';
        if (style.styleSheet){
            style.styleSheet.cssText = css;
        } else {
            style.appendChild(document.createTextNode(css));
        };
        head.appendChild(style);
    };
    const element = null;

    function preventImageDragging (event) {
        event.preventDefault();
    }

    function selectLayer (event) {
        const position = getDraggableNode(event.path).children[0].id.toString().slice(5);
        window.parent.postMessage({event: 'selectLayer', position: position}, 'http://127.0.0.1:3978/#/edit');
    }

    function getDraggableNode (path) {
        for (let i = 0; i < path.length; i++) {
            if (path[i].classList && path[i].classList.value) {
                if ([].includes.call(path[i].classList, 'drag-item')) {
                    return path[i];
                }
            }
        }
    }

    function mouseDown(event) {
        event.preventDefault();
        selectLayer(event);
        const ampStoryWidth = document.querySelector('body').clientWidth;
        const ampStoryHeight = document.querySelector('body').clientHeight;
        const target = getDraggableNode(event.path);
        const divParams = target.getBoundingClientRect();
        let centerX = event.x - divParams.left;
        let centerY = event.y - divParams.top;
        document.onmousemove = (moveEvent) => {
            drag(event,
                getDraggableNode(event.path),
                moveEvent, centerX, centerY,
                iframeParams = {ampStoryWidth: ampStoryWidth, ampStoryHeight: ampStoryHeight}
            );
        };
        document.onmouseleave = (moveEvent) => {
            mouseUp(event);
        };
        document.onmousedovn = (moveEvent) => {
            mouseUp(event);
        };
    };

    function mouseUp (event) {
        event.preventDefault();
        document.onmousemove = null;
        document.onmouseleave = null;
    };

    function drag (event, target, moveEvent, centerX, centerY) {
        if (event.screenX !== 0) {
            let leftInPx = (moveEvent.x - centerX);
            let topInPx = (moveEvent.y - centerY);
            target.style.left = ((leftInPx / iframeParams.ampStoryWidth) * 100) + '%';
            target.style.top = ((topInPx / iframeParams.ampStoryHeight) * 100) + '%';
            drop({offsetX: parseInt(leftInPx, 10), offsetY: parseInt(topInPx, 10)});
        }
    };

    function drop (coordinates) {
        window.parent.postMessage({event: 'move', coordinates: coordinates}, 'http://127.0.0.1:3978/#/edit');
    }
</script>

<% function getRotateValue (layer) {
    if (layer.settings.layerSettings.fullscreen) {
        var dist = Math.sqrt((Math.pow(ampStory.initialWidth, 2)) + (Math.pow(ampStory.initialHeight, 2)));
        var diagAngle = Math.asin((ampStory.initialHeight) / dist);

        var a1 = (((layer.settings.generalSettings.rotate * Math.PI / 180) % (Math.PI * 2)) + Math.PI * 4) % (Math.PI * 2);
        if (a1 > Math.PI) {
            a1 -= Math.PI;
        }
        if (a1 > Math.PI / 2 && a1 <= Math.PI) {
            a1 = (Math.PI / 2) - (a1 - (Math.PI / 2));
        }

        var ang1 = Math.PI / 2 - diagAngle - Math.abs(a1)
        var ang2 = Math.abs(diagAngle - Math.abs(a1))

        var scale1 = Math.cos(ang1) * dist / layer.settings.layerSettings.originalHeight
        var scale2 = Math.cos(ang2) * dist / layer.settings.layerSettings.originalWidth
        var scale = Math.max(scale1, scale2)
        return scale
    } else {
        return scale
    }
}

function getFullScreenAnimationContainerWidth (layer) {
    return parseFloat((100 * (Math.abs((+layer.settings.layerSettings.originalWidth * getRotateValue (layer)) *
            Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
            Math.abs((+layer.settings.layerSettings.originalHeight * getRotateValue (layer)) *
                    Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))))) / ampStory.initialWidth, 10)
}

function getFullScreenAnimationContainerHeight (layer) {
    return parseFloat((100 * (Math.abs((+layer.settings.layerSettings.originalWidth * getRotateValue (layer)) *
            Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
            Math.abs((+layer.settings.layerSettings.originalHeight * getRotateValue (layer)) *
                    Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))))) / ampStory.initialHeight, 10)
}

function getAnimationWidthEm (layer) {
    let thickness = 0;
    if (layer.settings.layerSettings.shapeStyles) {
        thickness = layer.settings.layerSettings.shapeStyles.thickness * 2;
    }
    return parseInt((Math.abs((+layer.settings.layerSettings.width + thickness) *
            Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
            Math.abs((+layer.settings.layerSettings.height + thickness) *
                    Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180)))), 10) / 16 + 'em';
}
function getAnimationHeightEm (layer) {
    let thickness = 0;
    if (layer.settings.layerSettings.shapeStyles) {
        thickness = layer.settings.layerSettings.shapeStyles.thickness * 2;
    }
    return parseInt((Math.abs((+layer.settings.layerSettings.width + thickness) *
            Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
            Math.abs((+layer.settings.layerSettings.height + thickness) *
                    Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180)))), 10) / 16 + 'em';
}

function getAnimationContainerWidth (layer) {
    let thickness = 0;
    if (layer.settings.layerSettings.shapeStyles) {
        thickness = layer.settings.layerSettings.shapeStyles.thickness * 2;
    }
    if (layer.settings.layerSettings.fullscreen) {
        return getFullScreenAnimationContainerWidth(layer) + '%';
    } else {
        return parseInt((100 * (Math.abs((+layer.settings.layerSettings.width + thickness) *
                Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
                Math.abs((+layer.settings.layerSettings.height + thickness) *
                        Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))))) / ampStory.initialWidth, 10) + '%';
    }
}

function getAnimationContainerHeight (layer) {
    let thickness = 0;
    if (layer.settings.layerSettings.shapeStyles) {
        thickness = layer.settings.layerSettings.shapeStyles.thickness * 2;
    }
    if (layer.settings.layerSettings.fullscreen) {
        return getFullScreenAnimationContainerHeight(layer) + '%'
    } else {
        return parseInt((100 * (Math.abs((+layer.settings.layerSettings.width + thickness) *
                Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
                Math.abs((+layer.settings.layerSettings.height + thickness) *
                        Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))))) / ampStory.initialHeight, 10) + '%';
    }
}

function getDraggableElementWidth (layer) {
    if (layer.settings.layerSettings.fullscreen && layer.type === 'image') {
        return (100 * layer.settings.layerSettings.originalWidth * getRotateValue(layer)) / parseInt((Math.abs(layer.settings.layerSettings.originalWidth * getRotateValue(layer) *
                Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
                Math.abs(layer.settings.layerSettings.originalHeight * getRotateValue(layer) *
                        Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180)))));
    } else {
        console.log((100 * layer.settings.layerSettings.width) / parseInt((Math.abs(layer.settings.layerSettings.width *
                Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
                Math.abs(layer.settings.layerSettings.height *
                        Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))))) + '%');
        return (100 * layer.settings.layerSettings.width) / parseInt((Math.abs(layer.settings.layerSettings.width *
                Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
                Math.abs(layer.settings.layerSettings.height *
                        Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))))) + '%';
    }
}
function getDraggableElementHeight (layer) {
    if (layer.settings.layerSettings.fullscreen && layer.type === 'image') {
        return (100 * layer.settings.layerSettings.originalHeight * getRotateValue(layer)) / parseInt((Math.abs(layer.settings.layerSettings.originalWidth * getRotateValue(layer) *
                Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
                Math.abs(layer.settings.layerSettings.originalHeight * getRotateValue(layer) *
                        Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180)))));
    } else {
        return (100 * layer.settings.layerSettings.height) / parseInt((Math.abs(layer.settings.layerSettings.width *
                Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
                Math.abs(layer.settings.layerSettings.height *
                        Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))))) + '%';
    }
}

function getDeraggableElementOffsetX (layer) {
    let thickness = 0;
    if (layer.settings.layerSettings.shapeStyles) {
        thickness = layer.settings.layerSettings.shapeStyles.thickness * 2;
    }
    if (layer.settings.generalSettings.rotate !== '0') {
        return layer.settings.generalSettings.innerOffsetX / (3.434 * (ampStory.initialWidth / 100)) + 'em';
    } else return '0';
}
function getDeraggableElementOffsetY (layer) {
    let thickness = 0;
    if (layer.settings.layerSettings.shapeStyles) {
        thickness = layer.settings.layerSettings.shapeStyles.thickness * 2;
    }
    if (layer.settings.generalSettings.rotate !== '0') {
        return layer.settings.generalSettings.innerOffsetY / (3.434 * (ampStory.initialWidth / 100)) + 'em';
    } else return '0';
}

function getFullScreenElementOffsetY (layer) {
    const heightContainerPx = ampStory.initialHeight * getFullScreenAnimationContainerHeight(layer) / 100;
    const heightContentPx = heightContainerPx * getDraggableElementHeight(layer) / 100;
    return (100 * ((heightContainerPx - heightContentPx) / 2) / heightContainerPx)
}

function getFullScreenElementOffsetX (layer) {
    const widthContainerPx = ampStory.initialWidth * getFullScreenAnimationContainerWidth(layer) / 100;
    const widthContentPx = widthContainerPx * getDraggableElementWidth(layer) / 100;
    return (100 * ((widthContainerPx - widthContentPx) / 2) / widthContainerPx)
}
%>

<amp-story class="single-slide" standalone poster-portrait-src="" publisher-logo-src="">
    <amp-story-page style="text-rendering: auto;background: #eeeeee" id='story' auto-advance-after="10s" class="container">
        <% let preview = false;
        if (currentSlide) {
            currentSlide.layers.sort((first, second) => {
                var keyA = first.position,
                        keyB = second.position;
                if(keyA < keyB) return -1;
                if(keyA > keyB) return 1;
                return 0;
            })
        } %>
        <% if (currentSlide) { %>
            <amp-story-grid-layer template="horizontal">
                <% currentSlide && currentSlide.layers && currentSlide.layers.map((layer, layerIndex) => { %>
                    <% var page = null
                            switch (layer.type) {
                    case 'text': %>
                    <div
                            onmousedown="mouseDown(event)"
                            onmouseup="mouseUp(event)"
                            class="drag-item single-page-item animate"
                    <% if (layer.content.value !== '') { %>
                            style="
                                    left: <%= ((layer.settings.generalSettings.offsetX / ampStory.initialWidth) * 100) + '%'%>;
                                    top: <%= ((layer.settings.generalSettings.offsetY / ampStory.initialHeight) * 100) + '%'%>;"
                            <% } %>
                    <% if (layer.settings.animateIn && !preview){ %>
                            animate-in="<%= layer.settings.animateIn %>"
                            <% } %>
                    <% if (layer.settings.animateDuration){ %>
                            animate-in-duration="<%= layer.settings.animateDuration %>s"
                            <% } %>
                    <% if (layer.settings.animateDelay){ %>
                            animate-in-delay="<%= layer.settings.animateDelay %>s"
                            <% } %>
                    >
                        <div draggable="true" id="layer<%=layer.position%>"
                             style=" transform: <%='rotate(' + layer.settings.generalSettings.rotate + 'deg)'%>;"
                        >
                            <div class="rotate"></div>
                            <% include layers/text.ejs %>
                        </div>
                    </div>
                    <% break;

                    case 'html': %>
                    <div
                            onmousedown="mouseDown(event)"
                            onmouseup="mouseUp(event)"
                            class="drag-item single-page-item animate"
                            style="
                                    left: <%= ((layer.settings.generalSettings.offsetX / ampStory.initialWidth) * 100) + '%'%>;
                                    top: <%= ((layer.settings.generalSettings.offsetY / ampStory.initialHeight) * 100) + '%'%>;"
                    <% if (layer.settings.animateIn && !preview){ %>
                            animate-in="<%= layer.settings.animateIn %>"
                            <% } %>
                    <% if (layer.settings.animateDuration){ %>
                            animate-in-duration="<%= layer.settings.animateDuration %>s"
                            <% } %>
                    <% if (layer.settings.animateDelay){ %>
                            animate-in-delay="<%= layer.settings.animateDelay %>s"
                            <% } %>
                    >
                        <div draggable="true" id="layer<%=layer.position%>"
                             style=" transform: <%='rotate(' + layer.settings.generalSettings.rotate + 'deg)'%>;">
                            <div class="rotate"></div>
                            <% include layers/text.ejs %>
                        </div>
                    </div>
                    <% break;

                    case 'shape': %>
                    <div
                            onmousedown="mouseDown(event)"
                            onmouseup="mouseUp(event)"
                            class="drag-item single-page-item animate"
                            style="
                                    position: absolute;
                                    width: <%=getAnimationWidthEm(layer)%>;
                                    height: <%=getAnimationHeightEm(layer)%>;
                                    left: <%= ((layer.settings.generalSettings.offsetX / ampStory.initialWidth) * 100) + '%' %>;
                                    top: <%= ((layer.settings.generalSettings.offsetY / ampStory.initialHeight) * 100) + '%' %>;"
                    <% if (layer.settings.animateIn && !preview){ %>
                            animate-in="<%= layer.settings.animateIn %>"
                            <% } %>
                    <% if (layer.settings.animateDuration){ %>
                            animate-in-duration="<%= layer.settings.animateDuration %>s"
                            <% } %>
                    <% if (layer.settings.animateDelay){ %>
                            animate-in-delay="<%= layer.settings.animateDelay %>s"
                            <% } %>
                    >
                        <div
                                id="layer<%=layer.position%>"
                                draggable="true"
                                class="rotate-wrapper "
                                style="
                                        position: absolute;
                                        width: <%=getDraggableElementWidth(layer);%>;
                                        height: <%=getDraggableElementHeight(layer);%>;
                                        transform: <%='rotate(' + layer.settings.generalSettings.rotate + 'deg)'%>;
                                        top: <%=getDeraggableElementOffsetY(layer);%>;
                                        left: <%=getDeraggableElementOffsetX(layer);%>;"
                        >
                            <div class='resizers'>
                                <div class="rotate"></div>
                                <div class='resizer top-left'></div>
                                <div class='resizer top-right'></div>
                                <div class='resizer bottom-left'></div>
                                <div class='resizer bottom-right'></div>
                                <% include layers/shape.ejs %>
                            </div>
                        </div>
                    </div>
                    <% break;

                    case 'image': %>
                    <div
                    <%if (layer.settings.layerSettings.fullscreen) {%>
                        class="full-screan-image drag-item animate "
                                <% if (!['pan-left', 'pan-right', 'pan-down', 'pan-up'].includes(layer.settings.animateIn)) { %>
                        style="
                                top: <%=(getFullScreenAnimationContainerHeight(layer) - 100) / -2 + '%'%>;
                                left: <%=(getFullScreenAnimationContainerWidth(layer) - 100) / -2 + '%'%>;
                                position: absolute;
                                width: <%=getAnimationContainerWidth(layer);%>;
                                height: <%=getAnimationContainerHeight(layer);%>;"
                                <% } else if (['pan-left', 'pan-right'].includes(layer.settings.animateIn)) { %>
                        style="
                                transform: translate(-50%, -50%);top: 0;left: 0;
                                position: absolute;
                                width: <%=getAnimationContainerWidth(layer);%>;
                                height: <%=getAnimationContainerHeight(layer);%>;"
                                <% } else if (['pan-down', 'pan-up'].includes(layer.settings.animateIn)) { %>
                        style="
                                transform: translate(-50%, -50%);top: 0;
                                position: absolute;
                                width: <%=getAnimationContainerWidth(layer);%>;
                                height: <%=getAnimationContainerHeight(layer);%>;"
                                <% } %>
                        onmousedown="selectLayer(event)"
                            <%} else {%>
                        onmousedown="mouseDown(event)"
                        onmouseup="mouseUp(event)"
                        class="drag-item single-page-item animate small-image"
                        style="
                                position: absolute;
                                width: <%=getAnimationWidthEm(layer)%>;
                                height: <%=getAnimationHeightEm(layer)%>;
                                left: <%= ((layer.settings.generalSettings.offsetX / ampStory.initialWidth) * 100) + '%'%>;
                                top: <%= ((layer.settings.generalSettings.offsetY / ampStory.initialHeight) * 100) + '%'%>;"
                            <% } %>
                    <% if (layer.settings.animateIn && !preview){ %>
                        animate-in="<%= layer.settings.animateIn %>"
                            <% } %>
                    <% if (layer.settings.animateDuration){ %>
                        animate-in-duration="<%= layer.settings.animateDuration %>s"
                            <% } %>
                    <% if (layer.settings.animateDelay){ %>
                        animate-in-delay="<%= layer.settings.animateDelay %>s"
                            <% } %>
                    <% if (layer.settings.animateIn === 'zoom-in'){ %>
                        scale-start="1" scale-end="1.5"
                            <% } %>
                    <% if (layer.settings.animateIn === 'zoom-out'){ %>
                        scale-start="1.5" scale-end="1"
                            <% } %>
                    >
                        <div draggable="true"
                             id="layer<%=layer.position%>"
                                <%if (layer.settings.layerSettings.fullscreen) {%>
                             style="
                                     position: absolute;
                                     left: <%=getFullScreenElementOffsetX(layer) + '%'%>;
                                     top: <%=getFullScreenElementOffsetY(layer) + '%';%>;
                                     width: <%=getDraggableElementWidth(layer) + '%'%>;
                                     height: <%=getDraggableElementHeight(layer) + '%';%>;
                                     transform: <%=`rotate(${layer.settings.generalSettings.rotate}deg)`%>;
                                     "
                                <% } else { %>
                             class="rotate-wrapper draggable"
                             style="
                                     position: absolute;
                                     width: <%=getDraggableElementWidth(layer);%>;
                                     height: <%=getDraggableElementHeight(layer);%>;
                                     transform: <%='rotate(' + layer.settings.generalSettings.rotate + 'deg)'%>;
                                     top: <%=getDeraggableElementOffsetY(layer);%>;
                                     left: <%=getDeraggableElementOffsetX(layer);%>;"
                                <% } %>
                        >
                            <div class='resizers'>
                                <div class="rotate"></div>
                                <% include layers/image.ejs %>
                            </div>
                        </div>
                    </div>
                    <% break

                    case 'video': %>
                    <div
                    <%if (layer.settings.layerSettings.fullscreen) {%>
                        class="full-screan-image drag-item animate"
                                <% if (!['pan-left', 'pan-right', 'pan-down', 'pan-up'].includes(layer.settings.animateIn)) { %>
                        style="
                                top: <%=(getFullScreenAnimationContainerHeight(layer) - 100) / -2 + '%'%>;
                                left: <%=(getFullScreenAnimationContainerWidth(layer) - 100) / -2 + '%'%>;
                                position: absolute;
                                width: <%=getAnimationContainerWidth(layer);%>;
                                height: <%=getAnimationContainerHeight(layer);%>;"
                                <% } else if (['pan-left', 'pan-right'].includes(layer.settings.animateIn)) { %>
                        style="
                                transform: translate(-50%, -50%);top: 0;left: 0;
                                position: absolute;
                                width: <%=getAnimationContainerWidth(layer);%>;
                                height: <%=getAnimationContainerHeight(layer);%>;"
                                <% } else if (['pan-down', 'pan-up'].includes(layer.settings.animateIn)) { %>
                        style="
                                transform: translate(-50%, -50%);top: 0;
                                position: absolute;
                                width: <%=getAnimationContainerWidth(layer);%>;
                                height: <%=getAnimationContainerHeight(layer);%>;"
                                <% } %>
                        onmousedown="selectLayer(event)"
                            <%} else {%>
                        onmousedown="mouseDown(event)"
                        onmouseup="mouseUp(event)"
                        class="drag-item animate small-image"
                        style="
                                position: absolute;
                                width: <%=getAnimationWidthEm(layer)%>;
                                height: <%=getAnimationHeightEm(layer)%>;
                                left: <%= ((layer.settings.generalSettings.offsetX / ampStory.initialWidth) * 100) + '%'%>;
                                top: <%= ((layer.settings.generalSettings.offsetY / ampStory.initialHeight) * 100) + '%'%>;"
                            <% } %>
                    <% if (layer.settings.animateIn && !preview){ %>
                        animate-in="<%= layer.settings.animateIn %>"
                            <% } %>
                    <% if (layer.settings.animateDuration){ %>
                        animate-in-duration="<%= layer.settings.animateDuration %>s"
                            <% } %>
                    <% if (layer.settings.animateDelay){ %>
                        animate-in-delay="<%= layer.settings.animateDelay %>s"
                            <% } %>
                    <% if (layer.settings.animateIn === 'zoom-in'){ %>
                        scale-start="1" scale-end="1.5"
                            <% } %>
                    <% if (layer.settings.animateIn === 'zoom-out'){ %>
                        scale-start="1.5" scale-end="1"
                            <% } %>
                    >
                        <div draggable="true"
                             id="layer<%=layer.position%>"
                                <%if (layer.settings.layerSettings.fullscreen) {%>
                             style="
                                     position: absolute;
                                     width: <%=getDraggableElementWidth(layer)%>;
                                     height: <%=getDraggableElementHeight(layer)%>;
                                     transform: <%=`rotate(${layer.settings.generalSettings.rotate}deg)`%>;
                                     "
                                <% } else { %>
                             class="rotate-wrapper"
                             style="
                                     position: absolute;
                                     width: <%=getDraggableElementWidth(layer);%>;
                                     height: <%=getDraggableElementHeight(layer);%>;
                                     transform: <%='rotate(' + layer.settings.generalSettings.rotate + 'deg)'%>;
                                     top: <%=getDeraggableElementOffsetY(layer);%>;
                                     left: <%=getDeraggableElementOffsetX(layer);%>;"
                                <% } %>
                        >
                            <div class='resizers'>
                                <div class="rotate"></div>
                                <div class='resizer top-left'></div>
                                <div class='resizer top-right'></div>
                                <div class='resizer bottom-left'></div>
                                <div class='resizer bottom-right'></div>
                                <% include layers/video.ejs %>
                            </div>
                        </div>
                    </div>
                    <% break
                    } %>
                <% }) %>
            </amp-story-grid-layer>
        <% } %>
    </amp-story-page>
</amp-story>
<% include js/rotate.ejs %>
<% include js/resizer.ejs %>

<script type="text/javascript" src="file:///users/rbilmakovskiy/backend-nodeJS/node_modules/amp-to-html/dist/js/subjx.js"></script>
<script>
    const Draggables =
        Subjx('.draggable').drag({
            each: {
                resize: true
            },
            snap: {
                x: 1,
                y: 1
            }
        });
</script>
</body>

</html>
